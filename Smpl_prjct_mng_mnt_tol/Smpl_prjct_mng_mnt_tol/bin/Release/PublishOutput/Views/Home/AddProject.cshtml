@model Smpl_prjct_mng_mnt_tol.EF.Project
@using Smpl_prjct_mng_mnt_tol.EF

@*performs  add and home functionalities for project mngr.*@

@{
    ViewBag.Title = "Project Manager";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .btn {
        /*margin-left:7px;
        margin-right:7px;*/
        border-left: 10px;
    }
    .topbuttonsDiv {
        margin-bottom: 40px;
    }
</style>



@if (ViewBag.message != null)
{
    <h1 style="color:crimson">@ViewBag.Message</h1>
}
@if (Session["logger"] != null)
{

    LoginViewModel a = new LoginViewModel();
    a = (LoginViewModel)Session["logger"];

    List<User> alluser = new List<User>();
    alluser = ViewBag.AllUsers;

    if (a.designationName == "Project Manager")
    {
        <h1>Project Manager Home</h1>

        <br />
        <br />
        <div style="float:right" class="topbuttonsDiv">


            <button>
                @Html.ActionLink("Project Manager Home", "ProjectManagerHome", "Home", null, new { @class = "btn btn-success" })
            </button>
            <button> @Html.ActionLink("Add Project", "AddProject", "Home", null, new { @class = "btn btn-primary" })</button>

            <button>
                @Html.ActionLink("Update Project", "UpdateProject", "Home", null, new { @class = "btn btn-danger" })
            </button>
            <button>
                @Html.ActionLink("Assign Employee", "AssignEmployee", "Home", null, new { @class = "btn btn-info" })
            </button>
            <button>
                @Html.ActionLink("Add New Task", "AddTask", "Task", null, new { @class = "btn btn-success" })
            </button>

            <button>
                @Html.ActionLink("Add Comment", "AddComment", "Task", null, new { @class = "btn btn-danger" })
            </button>

        </div>
        <div class="clearfix"></div>

        using (Html.BeginForm("AddProject", "Home", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @id = "AddUserForm", @class = "clearfix", role = "form" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.codeName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.codeName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.codeName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.startDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.startDate, new { htmlAttributes = new { @class = "form-control", @id = "datepicker1" } })
                        @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.endDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.endDate, new { htmlAttributes = new { @class = "form-control", @id = "datepicker2" } })
                        @Html.ValidationMessageFor(model => model.endDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.duration, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.duration, new { htmlAttributes = new { @class = "form-control", onfocus = "calculateDuration()" } })
                        @Html.ValidationMessageFor(model => model.duration, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                        @Html.LabelFor(model => model.filesId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.filesId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.filesId, "", new { @class = "text-danger" })
                            <br />
                    <a href="@Url.Action("ResetDefault", new { id = User.id })">
                            <span class="glyphicon glyphicon-list-alt"> </span>&nbsp;Reset as default
                        </a>
                    <button>
                                    @Html.ActionLink("Browse", "UploadFilesAdd", "Home",new { id = Model.id }, new { @class = "btn btn-danger" })
                                </button>
                            </div>


                        </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.statusId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        <p> @Html.RadioButtonFor(model => model.statusId, 1, new { @checked = "true" }) Not Started</p>
                        <p> @Html.RadioButtonFor(model => model.statusId, 2) Started</p>
                        <p> @Html.RadioButtonFor(model => model.statusId, 3) Completed</p>
                        <p>
                            @Html.RadioButtonFor(model => model.statusId, 4) Cancelled
                        </p>


                        @*@Html.EditorFor(model => model.statusId, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.statusId, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                        @Html.LabelFor(model => model.shortName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.shortName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.shortName, "", new { @class = "text-danger" })
                        </div>
                    </div>*@


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Add Project" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        }

    }
}
else


{
    <h1> You are not authorized,please login </h1>

}

@section scripts {
    <script src="~/Scripts/jquery-3.2.1.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.js"></script>
    <link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />


    <script type="text/javascript">
        $(function () {
           // alert("x");
            $("#datepicker1").datepicker();

            console.log($("#datepicker1").val());


        });

       
   

        function calculateDuration(sender, args) {

            var startdate = document.getElementById("datepicker1").value;

            var enddate = document.getElementById("datepicker2").value;

            if (emptycheck(startdate)) {
                return;
            }

            if (emptycheck(enddate)) {
                return;
            }


            startdate = new Date(startdate);
            enddate = new Date(enddate);

            console.log(startdate);
            console.log(enddate);


            var timeDiff = Math.abs(startdate.getTime() - enddate.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

            console.log(diffDays);
            document.getElementById("duration").value = diffDays;
        }

        function emptycheck(value) {



            return (!value || value == undefined || value == "" || value.length == 0);
        }

    </script>
}

